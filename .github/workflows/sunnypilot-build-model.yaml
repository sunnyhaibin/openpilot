name: Build Model from Upstream

env:
  BUILD_DIR: "/data/openpilot"
  OUTPUT_DIR: ${{ github.workspace }}/output
  SCONS_CACHE_DIR: ${{ github.workspace }}/release/ci/scons_cache
  UPSTREAM_REPO: "commaai/openpilot"

on:
  workflow_dispatch:
    inputs:
      upstream_branch:
        description: 'Upstream branch to build from'
        required: true
        default: 'master'
        type: string
      custom_name:
        description: 'Custom name for the model'
        required: false
        type: string
      file_name:
        description: 'File name prefix for the model files'
        required: false
        type: string
      is_20hz:
        description: 'Is this a 20Hz model'
        required: false
        type: boolean
        default: false


run-name: Build model [${{ inputs.custom_name || inputs.upstream_branch }}] from ref [${{ inputs.upstream_branch }}]

jobs:
  get_model:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.UPSTREAM_REPO }}
          ref: ${{ github.event.inputs.upstream_branch }}
          submodules: recursive

      - run: git lfs pull
        
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: models
          path: ${{ github.workspace }}/selfdrive/modeld/models/*.onnx

      
  build_model:
    runs-on: self-hosted
    needs: get_model

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - run: git lfs pull

      - name: Cache SCons
        uses: actions/cache@v4
        with:
          path: ${{env.SCONS_CACHE_DIR}}
          key: scons-${{ runner.os }}-${{ runner.arch }}-${{ github.head_ref || github.ref_name }}-model-${{ github.sha }}
          # Note: GitHub Actions enforces cache isolation between different build sources (PR builds, workflow dispatches, etc.) 
          #   for security. Only caches from the default branch are shared across all builds. This is by design and cannot be overridden.
          restore-keys: |
            scons-${{ runner.os }}-${{ runner.arch }}-${{ github.head_ref || github.ref_name }}-model
            scons-${{ runner.os }}-${{ runner.arch }}-${{ github.head_ref || github.ref_name }}
            scons-${{ runner.os }}-${{ runner.arch }}-${{ env.MASTER_NEW_BRANCH }}-model
            scons-${{ runner.os }}-${{ runner.arch }}-${{ env.MASTER_BRANCH }}-model
            scons-${{ runner.os }}-${{ runner.arch }}-${{ env.MASTER_NEW_BRANCH }}
            scons-${{ runner.os }}-${{ runner.arch }}-${{ env.MASTER_BRANCH }}
            scons-${{ runner.os }}-${{ runner.arch }}

      - name: Setup build environment
        run: |
          mkdir -p "${BUILD_DIR}/"
          sudo find $BUILD_DIR/ -mindepth 1 -delete
          echo "Starting build stage..."
          echo "Building from: ${{ env.UPSTREAM_REPO }} branch: ${{ github.event.inputs.upstream_branch }}"
      
      - name: Download model artifacts
        uses: actions/download-artifact@v4
        with:
          name: models
          path: ${{ github.workspace }}/selfdrive/modeld/models

      - name: Build Model
        run: |
          source /etc/profile
          export UV_PROJECT_ENVIRONMENT=${HOME}/venv
          export VIRTUAL_ENV=$UV_PROJECT_ENVIRONMENT
          scons -j$(nproc) cache_dir=${{ env.SCONS_CACHE_DIR }} ${{ github.workspace }}/selfdrive/modeld

      - name: Prepare Output
        run: |
          sudo rm -rf ${OUTPUT_DIR}
          mkdir -p ${OUTPUT_DIR}
          
          # Copy the model files
          rsync -avm \
            --include='*.dlc' \
            --include='*.thneed' \
            --include='*.pkl' \
            --include='*.onnx' \
            --exclude='*' \
            --delete-excluded \
            --chown=comma:comma \
            ./selfdrive/modeld/models/ ${OUTPUT_DIR}/
          
          # Rename files if file_name is provided
          if [ ! -z "${{ inputs.file_name }}" ]; then
            mv ${OUTPUT_DIR}/supercombo_tinygrad.pkl ${OUTPUT_DIR}/supercombo-${{ inputs.file_name }}_tinygrad.pkl
            mv ${OUTPUT_DIR}/supercombo_metadata.pkl ${OUTPUT_DIR}/supercombo-${{ inputs.file_name }}_metadata.pkl
          fi
          
          # Calculate SHA256 hashes
          TINYGRAD_HASH=$(sha256sum ${OUTPUT_DIR}/supercombo*_tinygrad.pkl | cut -d' ' -f1)
          METADATA_HASH=$(sha256sum ${OUTPUT_DIR}/supercombo*_metadata.pkl | cut -d' ' -f1)
          
          # Create metadata.json
          cat > ${OUTPUT_DIR}/metadata.json << EOF
          {
            "display_name": "${{ inputs.custom_name || inputs.upstream_branch }}",
            "full_name": "${{ inputs.file_name || 'default' }}",
            "is_20hz": ${{ inputs.is_20hz || false }},
            "files": {
              "drive_model": {
                "file_name": "$(basename ${OUTPUT_DIR}/supercombo*_tinygrad.pkl)",
                "sha256": "${TINYGRAD_HASH}"
              },
              "metadata": {
                "file_name": "$(basename ${OUTPUT_DIR}/supercombo*_metadata.pkl)",
                "sha256": "${METADATA_HASH}"
              }
            },
            "ref": "${{ inputs.upstream_branch }}",
            "build_time": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOF        

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: model-${{ github.event.inputs.custom_name || github.event.inputs.upstream_branch }}-${{ github.run_number }}
          path: ${{ env.OUTPUT_DIR }}
